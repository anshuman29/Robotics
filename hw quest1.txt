colors = [['red', 'green', 'green', 'red' , 'red'],
          ['red', 'red', 'green', 'red', 'red'],
          ['red', 'red', 'green', 'green', 'red'],
          ['red', 'red', 'red', 'red', 'red']]

measurements = ['green', 'green', 'green' ,'green', 'green']


motions = [[0,0],[0,1],[1,0],[1,0],[0,1]]

sensor_right = 0.7

p_move = 0.8

def show(p):
    for i in range(len(p)):
        print p[i]

#DO NOT USE IMPORT
#ENTER CODE BELOW HERE
#ANY CODE ABOVE WILL CAUSE
#HOMEWORK TO BE GRADED
#INCORRECT

p = []
i=4
j=5
z=0
for x in range(i):
    new=[]
    for y in range(j):
        new.append(1./(i*j))
    p.append(new)

def sense(p,Z):
    q=[]
    for x in range(i):
        new=[]
        for y in range(j):
            new.append(0.0)
        q.append(new)
    
    for x in range(i):
        for y in range(j):
            if colors[x][y]==Z:
                q[x][y]=p[x][y]*(sensor_right)
            else:
                q[x][y]=p[x][y]*(1-sensor_right)
            
    s=0
    for x in range(i):
        for y in range(j):
            s=s+q[x][y]
    for x in range(i):
        for y in range(j):
            q[x][y]=q[x][y]/s
            
    
    return q
    

def move(p,U):
    q=[]
    s=0
    for x in range(i):
        new=[]
        for y in range(j):
            new.append(0.0)
        q.append(new)
    
    for x in range(i):
        for y in range(j):
            s=p_move*(p[(x-U[0])%i][(y-U[1])%j])
            s=s+((1-p_move)*p[x][y])
            q[x][y]=s
            
    return q
#Your probability array must be printed 
#with the following code.

for z in range(5):
    p=move(p,motions[z])
    p=sense(p,measurements[z])



show(p)




